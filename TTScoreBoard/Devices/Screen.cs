using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TTScoreBoard.Devices
{
    public class Screen
    {
        private int mHeight;
        public int height{ get { return mHeight;} }
        private int mWidth;
        public int width { get { return mWidth; } }

        byte[,] mPixel;

        public Screen(int height, int width)
        {
            mHeight = height;
            mWidth = width;
            mPixel = new byte[mHeight, mWidth];
        }

        public void clear()
        {
            for (int y = 0; y < mHeight; y++)
            {
                for (int x = 0; x < mWidth; x++)
                {
                    mPixel[y,x] =  0;
                }
            }
        }

        public void write(String str)
        {
            byte[,] score = new byte[,] {{0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,7,7,0,7,7,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,3,3,3,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,2,2,2,0},
{0,3,3,3,3,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,2,2,2,2,0},
{3,3,3,3,3,0,0,3,3,3,3,3,0,0,0,0,0,0,0,2,2,2,2,2,0,0,2,2,2,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,1,1,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,1,1,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,1,1,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,1,1,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0},
{0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0}};

            byte[,] tus = new byte[,] { { 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5 },
                                    { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 },
                                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                    { 3, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 6 },
                                    { 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6 }
            };
            mPixel = score;
        }

        public byte pixelAt(int x, int y)
        {
            try
            {
                return mPixel[y, x];
            }
            catch(IndexOutOfRangeException)
            {
                // TODO: WARUM laden wir hier?
                return 0;
            }
        }
    }
}
